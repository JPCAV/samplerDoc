# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
att_RT[j, a, sa, "totalRT", s, m] = att_RT[j, a, sa, "totalRT", s, m] + as.numeric(tmp["rt"])
att_RT[j, a, sa, "nRTs", s, m] = att_RT[j, a, sa, "nRTs", s, m] + 1
}
}
}
}
}
}
}
att_RT
att_RT[,,,"totalRT",,] / att_RT[,,,"nRTs",,]
rm(tmp)
for(s in subjnams) {
cat("\n",s)
for(sa in SA_conds) {
for (m in dataSrc) {
# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
att_RT[j, a, sa, "totalRT", s, m] = att_RT[j, a, sa, "totalRT", s, m] + as.numeric(tmp["rt"])
att_RT[j, a, sa, "nRTs", s, m] = att_RT[j, a, sa, "nRTs", s, m] + 1
}
}
}
}
}
}
}
att_RT
head(allData)
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
tmp <- unlist(s_data[i, ])
tmp
# identify the attribute levels of the option chosen as best
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
tmp2
which(att_levels[[a]])
att_levels[[a]]
tmp[paste0("opt", tmp["response"], a)]
tmp
a
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
att_RT[tmp2, a, sa, "chosen", s, m] = att_RT[tmp2, a, sa, "chosen", s,m] + 1
tmp2
att_RT[1,,,,,]
for(s in subjnams) {
cat("\n",s)
for(sa in SA_conds) {
for (m in dataSrc) {
# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
# test whether level j of attribute a was in any option on this trial
if(any(tmp[paste0("opt", 1:noptions, a)] == att_levels[[a]][j])) {
# if shown, then increment the 'shown' counter by 1
att_RT[j, a, sa, "shown", s, m] = att_RT[j, a, sa, "shown", s, m] + as.numeric(tmp["rt"])
}
}
# identify the attribute levels of the option chosen as best
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
att_RT[tmp2, a, sa, "chosen", s, m] = att_RT[tmp2, a, sa, "chosen", s,m] + 1
}
}
}
}
}
}
for(s in subjnams) {
cat("\n",s)
for(sa in SA_conds) {
for (m in dataSrc) {
# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
# test whether level j of attribute a was in any option on this trial
if(any(tmp[paste0("opt", 1:noptions, a)] == att_levels[[a]][j])) {
# if shown, then increment the 'shown' counter by 1
att_RT[j, a, sa, "totalRT", s, m] = att_RT[j, a, sa, "totalRT", s, m] + as.numeric(tmp["rt"])
}
}
# identify the attribute levels of the option chosen as best
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
att_RT[tmp2, a, sa, "chosen", s, m] = att_RT[tmp2, a, sa, "chosen", s,m] + 1
}
}
}
}
}
}
att_RT <- array(dim = c(nlevel,
length(att_names),
nSA,
2,
nsubj,
2),
dimnames = list(1:nlevel,
att_names,
SA_conds,
c("totalRT","chosen"),
subjnams,
dataSrc),
data = 0)
att_RT <- array(dim = c(nlevel,
length(att_names),
nSA,
2,
nsubj,
2),
dimnames = list(1:nlevel,
att_names,
SA_conds,
c("totalRT","chosen"),
subjnams,
dataSrc),
data = 0)
SA_conds <- unique(allData$SA)
nSA <- length(SA_conds)
noptions <- 3
subjnams <- unique(allData$subject)
nsubj <- length(subjnams)
dataSrc <- unique(allData$source)
nDataSrc <-n_distinct(allData$source)
att_names <- sort(unique(allData$pos1))
# hard-coding names (not good practice...)
att_levels <- list(cost = sort(unique(allData$opt1cost)),
camera = sort(unique(allData$opt1camera)),
battery = sort(unique(allData$opt1battery)),
memory = sort(unique(allData$opt1memory)))
nlevel <- unique(sapply(att_levels,
length))
att_RT <- array(dim = c(nlevel,
length(att_names),
nSA,
2,
nsubj,
2),
dimnames = list(1:nlevel,
att_names,
SA_conds,
c("totalRT","chosen"),
subjnams,
dataSrc),
data = 0)
for(s in subjnams) {
cat("\n",s)
for(sa in SA_conds) {
for (m in dataSrc) {
# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
# test whether level j of attribute a was in any option on this trial
if(any(tmp[paste0("opt", 1:noptions, a)] == att_levels[[a]][j])) {
# if shown, then increment the 'shown' counter by 1
att_RT[j, a, sa, "totalRT", s, m] = att_RT[j, a, sa, "totalRT", s, m] + as.numeric(tmp["rt"])
}
}
# identify the attribute levels of the option chosen as best
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
att_RT[tmp2, a, sa, "chosen", s, m] = att_RT[tmp2, a, sa, "chosen", s,m] + 1
}
}
}
}
}
}
subjnams <- 1
for(s in subjnams) {
cat("\n",s)
for(sa in SA_conds) {
for (m in dataSrc) {
# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
# test whether level j of attribute a was in any option on this trial
if(any(tmp[paste0("opt", 1:noptions, a)] == att_levels[[a]][j])) {
# if shown, then increment the 'shown' counter by 1
att_RT[j, a, sa, "totalRT", s, m] = att_RT[j, a, sa, "totalRT", s, m] + as.numeric(tmp["rt"])
}
}
# identify the attribute levels of the option chosen as best
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
att_RT[tmp2, a, sa, "chosen", s, m] = att_RT[tmp2, a, sa, "chosen", s,m] + 1
}
}
}
}
}
}
att_RT
att_RT[,,,"totalRT",,] / att_RT[,,,"chosen",,]
# Plot the mean RT for each attribute level x SAT x subject x data/ppdata
# first get some properties of data set
att_names <- sort(unique(allData$pos1))
# hard-coding names (not good practice...)
att_levels <- list(cost = sort(unique(allData$opt1cost)),
camera = sort(unique(allData$opt1camera)),
battery = sort(unique(allData$opt1battery)),
memory = sort(unique(allData$opt1memory)))
nlevel <- unique(sapply(att_levels,
length))
# Speed-accuracy conditions
SA_conds <- unique(allData$SA)
nSA <- length(SA_conds)
noptions <- 3
subjnams <- unique(allData$subject)
nsubj <- length(subjnams)
dataSrc <- unique(allData$source)
nDataSrc <-n_distinct(allData$source)
att_RT <- array(dim = c(nlevel,
length(att_names),
nSA,
2,
nsubj,
2),
dimnames = list(1:nlevel,
att_names,
SA_conds,
c("totalRT","chosen"),
subjnams,
dataSrc),
data = 0)
for(s in subjnams) {
cat("\n",s)
for(sa in SA_conds) {
for (m in dataSrc) {
# subset data from subject s and deadline condition sa
# uncomment the following line to subset data from subject s and FAST/CAREFUL condition sa
s_data <- subset(allData,
subject == s &
SA == sa & source == m)
n <- nrow(s_data)
for(i in 1:n) {
tmp <- unlist(s_data[i, ])
# only record values if a choice was actually observed (ie, responded prior to deadline)
if(tmp["trialError"] == "FALSE") {
for(a in att_names) {
for(j in 1:nlevel) {
# test whether level j of attribute a was in any option on this trial
if(any(tmp[paste0("opt", 1:noptions, a)] == att_levels[[a]][j])) {
# if shown, then increment the 'shown' counter by 1
att_RT[j, a, sa, "totalRT", s, m] = att_RT[j, a, sa, "totalRT", s, m] + as.numeric(tmp["rt"])
}
}
# identify the attribute levels of the option chosen as best
tmp2 <- which(att_levels[[a]] == tmp[paste0("opt", tmp["response"], a)])
att_RT[tmp2, a, sa, "chosen", s, m] = att_RT[tmp2, a, sa, "chosen", s,m] + 1
}
}
}
}
}
}
meanRTAttLvl <- att_RT[,,,"totalRT",,] / att_RT[,,,"chosen",,]
meanRTAttLvl
cost <- as_tibble(meanRTAttLvl[,"cost",,]) %>%
add_column(cost = c("30", "45", "60"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, choiceProp = value)
meanRTAttLvlGroup<- apply(meanRTAttLvl,
1:4,
mean)
meanRTAttLvlGroup
meanRTAttLvlGroup<- apply(meanRTAttLvl,
5,
mean)
meanRTAttLvlGroup
# Mean RT for each participant x attLevel
meanRTAttLvl <- att_RT[,,,"totalRT",,] / att_RT[,,,"chosen",,]
meanRTAttLvl
meanRTAttLvlGroup<- apply(meanRTAttLvl,
4,
mean)
meanRTAttLvlGroup
meanRTAttLvlGroup<- apply(meanRTAttLvl,
1:4,
mean)
meanRTAttLvlGroup
meanRTAttLvlGroup<- apply(meanRTAttLvl,
c(1:3,5),
mean)
meanRTAttLvl
meanRTAttLvlGroup<- apply(meanRTAttLvl,
c(1:3,5),
mean)
meanRTAttLvlGroup<-
meanRTAttLvlGroup
meanRTAttLvlGroup
cost <- as_tibble(meanRTAttLvlGroup[,"cost",,,]) %>%
add_column(cost = c("30", "45", "60"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT = value)
cost <- as_tibble(meanRTAttLvlGroup[,"cost",,]) %>%
add_column(cost = c("30", "45", "60"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT = value)
COST
cost
mem <- as_tibble(meanRTAttLvlGroup[,"memory",,]) %>%
add_column(mem = c("16", "32", "64"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT = value)
cam <- as_tibble(meanRTAttLvlGroup[,"camera",,]) %>%
add_column(cam = c("8", "12", "16"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT = value)
batt <- as_tibble(meanRTAttLvlGroup[,"battery",,]) %>%
add_column(batt = c("10","16","24"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT= value)
costPLt <- ggplot(cost, aes(x = cost,
y = choiceProp,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16))
memPlt <- ggplot(mem, aes(x = mem,
y = choiceProp,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
camPlt <- ggplot(cam, aes(x = cam,
y = choiceProp,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
battPlt <- ggplot(batt, aes(x = batt,
y = choiceProp,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
require(patchwork)
# patchwork package combines plots
allPlts <- costPLt+ memPlt + camPlt + battPlt +plot_layout(ncol = 2)
allPlts
costPLt <- ggplot(cost, aes(x = cost,
y = meanRT,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16))
memPlt <- ggplot(mem, aes(x = mem,
y = meanRT,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
camPlt <- ggplot(cam, aes(x = cam,
y = meanRT,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
battPlt <- ggplot(batt, aes(x = batt,
y = meanRT,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
require(patchwork)
# patchwork package combines plots
allPlts <- costPLt+ memPlt + camPlt + battPlt +plot_layout(ncol = 2)
allPlts
cam %>%
mutate(camera = fct_relevel(camera, "8", "12", "16"))
cam %>%
mutate(cam = fct_relevel(cam, "8", "12", "16"))
cam <- mutate(cam = fct_relevel(cam, "8", "12", "16")) %>%
as_tibble(meanRTAttLvlGroup[,"camera",,]) %>%
add_column(cam = c("8", "12", "16"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT = value)
cam
typeof(cam$cam)
mutate(cam = fct_relevel(cam, "8", "12", "16"))
fct_relevel(cam, "8", "12", "16")
fct_relevel(cam$cam)
cam <- mutate(cam = fct_relevel(cam, "8", "12", "16")) %>%
as_tibble(meanRTAttLvlGroup[,"camera",,]) %>%
add_column(cam = c("8", "12", "16"),
.before = "speed.data") %>%
pivot_longer(cols = "speed.data":"accuracy.RDM") %>%
rename(satSrc = name, meanRT = value)
cam
fct_relevel(cam$cam, "8", "12", "16")
cam$cam <- fct_relevel(cam$cam, "8", "12", "16")
camPlt <- ggplot(cam, aes(x = cam,
y = meanRT,
group = satSrc,
colour = satSrc)) +
geom_line(aes(linetype = satSrc)) +
geom_point(size = 4) +
theme(axis.title.y = element_text(size = 16, face = 'bold'),
axis.text.y = element_text(size = 16),
axis.title.x = element_text(size = 16, face = 'bold'),
axis.text.x = element_text(size = 16),
legend.position = 'none')
# patchwork package combines plots
allPlts <- costPLt+ memPlt + camPlt + battPlt +plot_layout(ncol = 2)
allPlts
getwd()
# save attribute choice counts for ppdata/data
save(att_RT, file = "ppDataMeanRTArrRDMNull.RData")
load("~/Documents/Contract Work/Samplers Project/PMwG-Sampler/dataObjects/samplah.RData")
View(Samplah)
Samplah$ll_func
